{"version":3,"sources":["components/TextField.js","components/MultipleSelection.js","containers/products/components/Header.js","containers/products/components/Cards.js","containers/products/index.js","App.js","serviceWorker.js","index.js"],"names":["Field","props","TextField","id","fullWidth","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","maxWidth","chips","display","flexWrap","chip","noLabel","marginTop","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","MultipleSelection","label","suggestions","classes","FormControl","className","InputLabel","Select","labelId","multiple","input","Input","renderValue","selected","join","map","suggestion","MenuItem","key","value","Checkbox","checked","indexOf","ListItemText","primary","Header","filters","searchText","setSearchText","selectedCategories","setSelectedCategories","selectedDeliveryTime","setSelectedDeliveryTime","onChangeHandler","categories","Row","Col","md","onChange","Card","product","CardBody","name","price","thousandSeparator","decimalSeparator","decimalScale","displayType","prefix","description","substring","furniture_style","category","delivery_time","Cards","products","length","idx","e","target","Index","useState","defaultProducts","setDefaultProducts","setProducts","setCategories","useEffect","a","async","axios","get","response","data","furniture_styles","fetchData","filteredProducts","filter","productFiltered","categoriesFiltered","toLowerCase","includes","forEach","val","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd7f490f.chunk.js","sourcesContent":["import React from 'react'\nimport TextField from '@material-ui/core/TextField';\n\nconst Field = ({ ...props }) => {\n  return (\n    <TextField id=\"standard-basic\" fullWidth {...props} />\n  )\n}\n\nexport default Field","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n    maxWidth: 300,\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  chip: {\n    margin: 2,\n  },\n  noLabel: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst MultipleSelection = ({ label, suggestions, ...props }) => {\n  const classes = useStyles();\n\n  return (\n    <FormControl className={classes.formControl} fullWidth>\n      <InputLabel id=\"demo-mutiple-checkbox-label\">{label}</InputLabel>\n      <Select\n        labelId=\"demo-mutiple-checkbox-label\"\n        id=\"demo-mutiple-checkbox\"\n        multiple\n        input={<Input />}\n        renderValue={selected => selected.join(', ')}\n        MenuProps={MenuProps}\n        {...props}\n      >\n        {suggestions.map(suggestion => (\n          <MenuItem key={suggestion} value={suggestion}>\n            <Checkbox checked={props.value.indexOf(suggestion) > -1} />\n            <ListItemText primary={suggestion} />\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  )\n}\n\nexport default MultipleSelection","import React, { Fragment } from 'react'\nimport { Row, Col } from 'reactstrap'\n\nimport TextField from '../../../components/TextField'\nimport MultipleSelection from '../../../components/MultipleSelection'\n\nconst Header = (props) => {\n  const {\n    filters: {\n      searchText,\n      setSearchText,\n      selectedCategories,\n      setSelectedCategories,\n      selectedDeliveryTime,\n      setSelectedDeliveryTime\n    }, \n    onChangeHandler,\n    categories\n  } = props\n\n  return (\n    <Fragment >\n      <Row >\n        <Col md={6} className=\"mb-3\" >\n          <TextField value={searchText} onChange={onChangeHandler({ setSearchText })} label=\"Search Furniture\" />\n        </Col>\n      </Row>\n      <Row >\n        <Col md={6} >\n          <MultipleSelection\n            value={selectedCategories}\n            onChange={onChangeHandler({ setSelectedCategories })}\n            label=\"Furniture Style\"\n            suggestions={categories}\n          />\n        </Col>\n        <Col md={6} >\n          <MultipleSelection\n            value={selectedDeliveryTime}\n            onChange={onChangeHandler({ setSelectedDeliveryTime })}\n            label=\"Delivery Time\"\n            suggestions={[\n              \"1_week\",\n              \"2_weeks\",\n              \"1_month\",\n              \"more\"\n            ]}\n          />\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\n\nexport default Header","import React from 'react'\nimport { Card as Cardstrap, CardBody, Row, Col } from 'reactstrap'\nimport NumberFormat from 'react-number-format'\n\nconst Card = ({ product }) => {\n  return (\n    <Cardstrap >\n      <CardBody >\n        <Row >\n          <Col className=\"card-title\" >{product.name}</Col>\n          <Col className=\"d-flex justify-content-end card-price\" >\n            <NumberFormat\n              value={product.price}\n              thousandSeparator=\".\"\n              decimalSeparator=\",\"\n              decimalScale={2}\n              displayType=\"text\"\n              prefix=\"Rp \"\n            />\n          </Col>\n        </Row>\n        <Row className=\"mb-2\" >\n          <Col className=\"card-description\" >{product.description.substring(0, 114) + \"...\"}</Col>\n        </Row>\n        <Row >\n          <Col className=\"card-categories\" >\n            {product.furniture_style.map(category => (\n              category + \" \"\n            ))}\n          </Col>\n        </Row>\n        <Row >\n          <Col className=\"d-flex justify-content-end card-delivery\" >{product.delivery_time} days</Col>\n        </Row>\n      </CardBody>\n    </Cardstrap>\n  )\n}\n\nconst Cards = ({ products }) => {\n  if (!products.length) {\n    return (\n      <Row >\n        <Col className=\"d-flex justify-content-center\" >\n          NO DATA\n        </Col>\n      </Row>\n    )\n  }\n\n  return (\n    <Row >\n      {products.map((product, idx) => (\n        <Col className=\"mb-3\" md={6} key={idx} >\n          <Card product={product} />\n        </Col>\n      ))}\n    </Row>\n  )\n}\n\nexport default Cards","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { Container, Row, Col } from 'reactstrap'\n\nimport '../../styles.css'\n\nimport Header from './components/Header'\nimport Cards from './components/Cards'\n\nconst onChangeHandler = ({ setSearchText, setSelectedCategories, setSelectedDeliveryTime }) => e => {\n  if (setSearchText) {\n    setSearchText(e.target.value)\n  } else if (setSelectedCategories) {\n    setSelectedCategories(e.target.value)\n  } else if (setSelectedDeliveryTime) {\n    setSelectedDeliveryTime(e.target.value)\n  }\n}\n\nconst Index = () => {\n  const [defaultProducts, setDefaultProducts] = useState([])\n  const [products, setProducts] = useState([])\n  const [categories, setCategories] = useState([])\n  const [searchText, setSearchText] = useState(\"\")\n  const [selectedCategories, setSelectedCategories] = useState([])\n  const [selectedDeliveryTime, setSelectedDeliveryTime] = useState([])\n  const filters = {\n    searchText,\n    selectedCategories,\n    selectedDeliveryTime,\n    setSearchText,\n    setSelectedCategories,\n    setSelectedDeliveryTime,\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await axios.get('https://www.mocky.io/v2/5c9105cb330000112b649af8')\n      const { data } = response\n\n      setProducts(data.products)\n      setDefaultProducts(data.products)\n      setCategories(data.furniture_styles)\n    }\n    fetchData()\n  }, [])\n\n  useEffect(() => {\n    const filteredProducts = defaultProducts.filter(product => {\n      const { name, furniture_style } = product\n      let productFiltered = false\n      let categoriesFiltered = selectedCategories.length > 0 ? false : true\n      let deliveryTimeFiltered = selectedDeliveryTime.length > 0 ? false : true\n\n      if (name.toLowerCase().includes(searchText.toLowerCase())) {\n        productFiltered = true\n      }\n\n      if (selectedCategories.length) {\n        selectedCategories.forEach(val => {\n          if (furniture_style.includes(val)) {\n            categoriesFiltered = true\n          }\n        })\n      }\n\n      if (selectedDeliveryTime.length) {\n        \n      }\n\n      return productFiltered && categoriesFiltered\n    })\n\n    setProducts(filteredProducts)\n  }, [searchText, selectedCategories, selectedDeliveryTime])\n\n  return (\n    <Container >\n      <Row className=\"pt-4 pb-4 header\" >\n        <Col >\n          <Header\n            onChangeHandler={onChangeHandler}\n            filters={filters}\n            categories={categories}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mt-4\" >\n        <Col >\n          <Cards products={products} />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default Index","import React from 'react'\n\nimport ProductIndex from './containers/products/index'\n\nfunction App() {\n  return (\n    <ProductIndex />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}